
DAY9_ASSIGNEMENT_QUE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001288  08001288  00002288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d4  080012d4  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080012d4  080012d4  000022d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012dc  080012dc  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012dc  080012dc  000022dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012e0  080012e0  000022e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080012e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001780  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007f7  00000000  00000000  000047fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00004ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f6  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001509  00000000  00000000  0000525e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fc8  00000000  00000000  00006767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c13f  00000000  00000000  0000872f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009486e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008ec  00000000  00000000  000948b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000951a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  000951bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001270 	.word	0x08001270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001270 	.word	0x08001270

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000278:	4b28      	ldr	r3, [pc, #160]	@ (800031c <LedInit+0xac>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a27      	ldr	r2, [pc, #156]	@ (800031c <LedInit+0xac>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30

	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000284:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <LedInit+0xb0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	0052      	lsls	r2, r2, #1
 800028c:	3201      	adds	r2, #1
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	43d2      	mvns	r2, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a21      	ldr	r2, [pc, #132]	@ (8000320 <LedInit+0xb0>)
 800029a:	400b      	ands	r3, r1
 800029c:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 800029e:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <LedInit+0xb0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000320 <LedInit+0xb0>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	6013      	str	r3, [r2, #0]

	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <LedInit+0xb0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	0052      	lsls	r2, r2, #1
 80002bc:	3201      	adds	r2, #1
 80002be:	2101      	movs	r1, #1
 80002c0:	4091      	lsls	r1, r2
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	2001      	movs	r0, #1
 80002c8:	fa00 f202 	lsl.w	r2, r0, r2
 80002cc:	430a      	orrs	r2, r1
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <LedInit+0xb0>)
 80002d4:	400b      	ands	r3, r1
 80002d6:	6093      	str	r3, [r2, #8]

	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002d8:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <LedInit+0xb0>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	0052      	lsls	r2, r2, #1
 80002e0:	3201      	adds	r2, #1
 80002e2:	2101      	movs	r1, #1
 80002e4:	4091      	lsls	r1, r2
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	0052      	lsls	r2, r2, #1
 80002ea:	2001      	movs	r0, #1
 80002ec:	fa00 f202 	lsl.w	r2, r0, r2
 80002f0:	430a      	orrs	r2, r1
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <LedInit+0xb0>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	60d3      	str	r3, [r2, #12]

	LED_GPIO->OTYPER &= ~BV(pin);
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <LedInit+0xb0>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	43d2      	mvns	r2, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <LedInit+0xb0>)
 800030e:	400b      	ands	r3, r1
 8000310:	6053      	str	r3, [r2, #4]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40023800 	.word	0x40023800
 8000320:	40020c00 	.word	0x40020c00

08000324 <LedOn>:

void LedOn(uint32_t pin){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]

LED_GPIO->ODR |= BV(pin);
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <LedOn+0x28>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	2101      	movs	r1, #1
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a04      	ldr	r2, [pc, #16]	@ (800034c <LedOn+0x28>)
 800033c:	430b      	orrs	r3, r1
 800033e:	6153      	str	r3, [r2, #20]

}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40020c00 	.word	0x40020c00

08000350 <LedOff>:

void LedOff(uint32_t pin){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]

	LED_GPIO->ODR &= ~BV(pin);
 8000358:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <LedOff+0x28>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	2101      	movs	r1, #1
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	43d2      	mvns	r2, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a03      	ldr	r2, [pc, #12]	@ (8000378 <LedOff+0x28>)
 800036a:	400b      	ands	r3, r1
 800036c:	6153      	str	r3, [r2, #20]

}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40020c00 	.word	0x40020c00

0800037c <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <DelayMs+0x44>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <DelayMs+0x48>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <DelayMs+0x4c>)
 8000390:	fba2 2303 	umull	r2, r3, r2, r3
 8000394:	099b      	lsrs	r3, r3, #6
 8000396:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003a2:	bf00      	nop
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <DelayMs+0x44>)
 80003a6:	685a      	ldr	r2, [r3, #4]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	1ad2      	subs	r2, r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d3f8      	bcc.n	80003a4 <DelayMs+0x28>
}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e0001000 	.word	0xe0001000
 80003c4:	20000000 	.word	0x20000000
 80003c8:	10624dd3 	.word	0x10624dd3

080003cc <LIS_WriteIO>:


#include "lis3dsh.h"

// Accel IO Functions
void LIS_WriteIO(uint8_t reg, uint8_t data[], uint8_t size) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	71bb      	strb	r3, [r7, #6]
	// enable slave
	SPI_CS_Enable();
 80003dc:	f000 fa02 	bl	80007e4 <SPI_CS_Enable>
	// write register address
	SPI_Transmit(reg);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f9cc 	bl	8000780 <SPI_Transmit>
	// write data byte(s)
	for(int i=0; i<size; i++)
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	e009      	b.n	8000402 <LIS_WriteIO+0x36>
		SPI_Transmit(data[i]);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	4413      	add	r3, r2
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f9c2 	bl	8000780 <SPI_Transmit>
	for(int i=0; i<size; i++)
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	429a      	cmp	r2, r3
 8000408:	dbf1      	blt.n	80003ee <LIS_WriteIO+0x22>
	// disable slave
	SPI_CS_Disable();
 800040a:	f000 f9f7 	bl	80007fc <SPI_CS_Disable>
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <LIS_ReadIO>:

void LIS_ReadIO(uint8_t reg, uint8_t data[], uint8_t size) {
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	6039      	str	r1, [r7, #0]
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	4613      	mov	r3, r2
 8000424:	71bb      	strb	r3, [r7, #6]
	reg |= BV(7); /*bug fixed R=1 */
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800042c:	71fb      	strb	r3, [r7, #7]
	// enable slave
	SPI_CS_Enable();
 800042e:	f000 f9d9 	bl	80007e4 <SPI_CS_Enable>
	// write register address
	SPI_Transmit(reg);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f9a3 	bl	8000780 <SPI_Transmit>
	// read data byte(s)
	for(int i=0; i<size; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e00b      	b.n	8000458 <LIS_ReadIO+0x42>
		data[i] = SPI_Receive();
 8000440:	f000 f9c2 	bl	80007c8 <SPI_Receive>
 8000444:	4603      	mov	r3, r0
 8000446:	4619      	mov	r1, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	4413      	add	r3, r2
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3301      	adds	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbef      	blt.n	8000440 <LIS_ReadIO+0x2a>
	// disable slave
	SPI_CS_Disable();
 8000460:	f000 f9cc 	bl	80007fc <SPI_CS_Disable>
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <LIS_Init>:

// Accel Init
void LIS_Init(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
	// Initialize SPI
	SPI_Init();
 8000472:	f000 f901 	bl	8000678 <SPI_Init>
	DelayMs(3);
 8000476:	2003      	movs	r0, #3
 8000478:	f7ff ff80 	bl	800037c <DelayMs>
	// Set Data rate and Enable axes
	uint8_t config = (LIS_DATARATE_25 | LIS_XYZ_ENABLE);
 800047c:	2347      	movs	r3, #71	@ 0x47
 800047e:	71fb      	strb	r3, [r7, #7]
	LIS_WriteIO(LIS_CTRL_REG4_ADDR, &config, 1);
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	2020      	movs	r0, #32
 8000488:	f7ff ffa0 	bl	80003cc <LIS_WriteIO>
	DelayMs(3);
 800048c:	2003      	movs	r0, #3
 800048e:	f7ff ff75 	bl	800037c <DelayMs>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <LIS_GetData>:

// Accel Get Raw Data
LIS_Data LIS_GetData(void) {
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t x, y, z;
	// read x low and x high and combine to 16-bit x reading
	LIS_ReadIO(LIS_OUT_X_L_ADDR, data, 2);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	2202      	movs	r2, #2
 80004a8:	4619      	mov	r1, r3
 80004aa:	2028      	movs	r0, #40	@ 0x28
 80004ac:	f7ff ffb3 	bl	8000416 <LIS_ReadIO>
	x = ((uint16_t)data[1] << 8) | data[0];
 80004b0:	7c7b      	ldrb	r3, [r7, #17]
 80004b2:	021b      	lsls	r3, r3, #8
 80004b4:	b21a      	sxth	r2, r3
 80004b6:	7c3b      	ldrb	r3, [r7, #16]
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	4313      	orrs	r3, r2
 80004bc:	b21b      	sxth	r3, r3
 80004be:	82fb      	strh	r3, [r7, #22]
	// read y low and y high and combine to 16-bit y reading
	LIS_ReadIO(LIS_OUT_Y_L_ADDR, data, 2);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2202      	movs	r2, #2
 80004c6:	4619      	mov	r1, r3
 80004c8:	202a      	movs	r0, #42	@ 0x2a
 80004ca:	f7ff ffa4 	bl	8000416 <LIS_ReadIO>
	y = ((uint16_t)data[1] << 8) | data[0];
 80004ce:	7c7b      	ldrb	r3, [r7, #17]
 80004d0:	021b      	lsls	r3, r3, #8
 80004d2:	b21a      	sxth	r2, r3
 80004d4:	7c3b      	ldrb	r3, [r7, #16]
 80004d6:	b21b      	sxth	r3, r3
 80004d8:	4313      	orrs	r3, r2
 80004da:	b21b      	sxth	r3, r3
 80004dc:	82bb      	strh	r3, [r7, #20]
	// read z low and z high and combine to 16-bit z reading
	LIS_ReadIO(LIS_OUT_Z_L_ADDR, data, 2);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2202      	movs	r2, #2
 80004e4:	4619      	mov	r1, r3
 80004e6:	202c      	movs	r0, #44	@ 0x2c
 80004e8:	f7ff ff95 	bl	8000416 <LIS_ReadIO>
	z = ((uint16_t)data[1] << 8) | data[0];
 80004ec:	7c7b      	ldrb	r3, [r7, #17]
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	7c3b      	ldrb	r3, [r7, #16]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b21b      	sxth	r3, r3
 80004fa:	827b      	strh	r3, [r7, #18]
	// fill readings in struct and return
	LIS_Data val;
	val.x = x;
 80004fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000500:	813b      	strh	r3, [r7, #8]
	val.y = y;
 8000502:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000506:	817b      	strh	r3, [r7, #10]
	val.z = z;
 8000508:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800050c:	81bb      	strh	r3, [r7, #12]
	return val;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	461a      	mov	r2, r3
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	6010      	str	r0, [r2, #0]
 800051a:	889b      	ldrh	r3, [r3, #4]
 800051c:	8093      	strh	r3, [r2, #4]
}
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <LIS_DRdy>:

// Accel if Ready
int LIS_DRdy(void) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
	uint8_t status;
	do {
		LIS_ReadIO(LIS_STATUS_ADDR, &status, 1);
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	2201      	movs	r2, #1
 8000530:	4619      	mov	r1, r3
 8000532:	2027      	movs	r0, #39	@ 0x27
 8000534:	f7ff ff6f 	bl	8000416 <LIS_ReadIO>
	} while( (status & LIS_STATUS_XYZ_Msk) == 0 );
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f003 0307 	and.w	r3, r3, #7
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f4      	beq.n	800052c <LIS_DRdy+0x6>
	return 1;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <DelayMs+0x44>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <DelayMs+0x48>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <DelayMs+0x4c>)
 8000560:	fba2 2303 	umull	r2, r3, r2, r3
 8000564:	099b      	lsrs	r3, r3, #6
 8000566:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000572:	bf00      	nop
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <DelayMs+0x44>)
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	1ad2      	subs	r2, r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3f8      	bcc.n	8000574 <DelayMs+0x28>
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e0001000 	.word	0xe0001000
 8000594:	20000000 	.word	0x20000000
 8000598:	10624dd3 	.word	0x10624dd3

0800059c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	@ 0x30
 80005a0:	af00      	add	r7, sp, #0
	char str[32];
	int ret;
	LIS_Data val;
	SystemInit();
 80005a2:	f000 f96d 	bl	8000880 <SystemInit>
	LIS_Init();
 80005a6:	f7ff ff61 	bl	800046c <LIS_Init>
	DelayMs(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ae:	f7ff ffcd 	bl	800054c <DelayMs>
	LedInit(LED_GREEN);
 80005b2:	200c      	movs	r0, #12
 80005b4:	f7ff fe5c 	bl	8000270 <LedInit>
	LedInit(LED_ORANGE);
 80005b8:	200d      	movs	r0, #13
 80005ba:	f7ff fe59 	bl	8000270 <LedInit>
	LedInit(LED_RED);
 80005be:	200e      	movs	r0, #14
 80005c0:	f7ff fe56 	bl	8000270 <LedInit>
	LedInit(LED_BLUE);
 80005c4:	200f      	movs	r0, #15
 80005c6:	f7ff fe53 	bl	8000270 <LedInit>

	while(1) {

		ret = LIS_DRdy();
 80005ca:	f7ff ffac 	bl	8000526 <LIS_DRdy>
 80005ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(ret){
 80005d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <main+0x2e>
			val = LIS_GetData();
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff5e 	bl	800049a <LIS_GetData>
			sprintf(str,"X = %d, Y = %d ",val.x,val.y);
 80005de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005e2:	461a      	mov	r2, r3
 80005e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e8:	f107 000c 	add.w	r0, r7, #12
 80005ec:	491e      	ldr	r1, [pc, #120]	@ (8000668 <main+0xcc>)
 80005ee:	f000 f9a7 	bl	8000940 <siprintf>
			sprintf(str,"Z = %d",val.z);
 80005f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005f6:	461a      	mov	r2, r3
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	491b      	ldr	r1, [pc, #108]	@ (800066c <main+0xd0>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f99e 	bl	8000940 <siprintf>
			if(val.x > 1000)
 8000604:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000608:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800060c:	dd03      	ble.n	8000616 <main+0x7a>
				LedOn(LED_RED);
 800060e:	200e      	movs	r0, #14
 8000610:	f7ff fe88 	bl	8000324 <LedOn>
 8000614:	e002      	b.n	800061c <main+0x80>
			else
				LedOff(LED_RED);
 8000616:	200e      	movs	r0, #14
 8000618:	f7ff fe9a 	bl	8000350 <LedOff>

			if(val.x < -2500)
 800061c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000620:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <main+0xd4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	da03      	bge.n	800062e <main+0x92>
				LedOn(LED_GREEN);
 8000626:	200c      	movs	r0, #12
 8000628:	f7ff fe7c 	bl	8000324 <LedOn>
 800062c:	e002      	b.n	8000634 <main+0x98>
			else
				LedOff(LED_GREEN);
 800062e:	200c      	movs	r0, #12
 8000630:	f7ff fe8e 	bl	8000350 <LedOff>

			if(val.y > 2500)
 8000634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000638:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800063c:	4293      	cmp	r3, r2
 800063e:	dd03      	ble.n	8000648 <main+0xac>
				LedOn(LED_ORANGE);
 8000640:	200d      	movs	r0, #13
 8000642:	f7ff fe6f 	bl	8000324 <LedOn>
 8000646:	e002      	b.n	800064e <main+0xb2>
			else
				LedOff(LED_ORANGE);
 8000648:	200d      	movs	r0, #13
 800064a:	f7ff fe81 	bl	8000350 <LedOff>

			if(val.y < -3000)
 800064e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000652:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <main+0xd8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	da03      	bge.n	8000660 <main+0xc4>
				LedOn(LED_BLUE);
 8000658:	200f      	movs	r0, #15
 800065a:	f7ff fe63 	bl	8000324 <LedOn>
 800065e:	e7b4      	b.n	80005ca <main+0x2e>
			else
				LedOff(LED_BLUE);
 8000660:	200f      	movs	r0, #15
 8000662:	f7ff fe75 	bl	8000350 <LedOff>
		ret = LIS_DRdy();
 8000666:	e7b0      	b.n	80005ca <main+0x2e>
 8000668:	08001288 	.word	0x08001288
 800066c:	08001298 	.word	0x08001298
 8000670:	fffff63c 	.word	0xfffff63c
 8000674:	fffff448 	.word	0xfffff448

08000678 <SPI_Init>:
 */


#include "spi.h"

void SPI_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	// SPI GPIO CS pin config
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800067c:	4b3c      	ldr	r3, [pc, #240]	@ (8000770 <SPI_Init+0xf8>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	4a3b      	ldr	r2, [pc, #236]	@ (8000770 <SPI_Init+0xf8>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOE->MODER &= ~BV(SPI_CS_PIN*2+1); // GPIO mode=OUTPUT(0b01)
 8000688:	4b3a      	ldr	r3, [pc, #232]	@ (8000774 <SPI_Init+0xfc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a39      	ldr	r2, [pc, #228]	@ (8000774 <SPI_Init+0xfc>)
 800068e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000692:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= BV(SPI_CS_PIN*2);
 8000694:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <SPI_Init+0xfc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a36      	ldr	r2, [pc, #216]	@ (8000774 <SPI_Init+0xfc>)
 800069a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800069e:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR &= ~BV(SPI_CS_PIN*2+1); // GPIO speed=Medium(0b01)
 80006a0:	4b34      	ldr	r3, [pc, #208]	@ (8000774 <SPI_Init+0xfc>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a33      	ldr	r2, [pc, #204]	@ (8000774 <SPI_Init+0xfc>)
 80006a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006aa:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= BV(SPI_CS_PIN*2);
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SPI_Init+0xfc>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SPI_Init+0xfc>)
 80006b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b6:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2)); // GPIO No Pull-up/down (0b00)
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SPI_Init+0xfc>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000774 <SPI_Init+0xfc>)
 80006be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80006c2:	60d3      	str	r3, [r2, #12]
	GPIOE->OTYPER &= ~BV(SPI_CS_PIN);	// GPIO push-pull
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <SPI_Init+0xfc>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <SPI_Init+0xfc>)
 80006ca:	f023 0308 	bic.w	r3, r3, #8
 80006ce:	6053      	str	r3, [r2, #4]
	// Disable slave initially
	SPI_CS_Disable();
 80006d0:	f000 f894 	bl	80007fc <SPI_CS_Disable>

	// SPI GPIO MOSI, MISO, SCLK pin config
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006d4:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SPI_Init+0xf8>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d8:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <SPI_Init+0xf8>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2)); // GPIO mode=AltFn(0b10)
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SPI_Init+0x100>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a24      	ldr	r2, [pc, #144]	@ (8000778 <SPI_Init+0x100>)
 80006e6:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 80006ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <SPI_Init+0x100>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <SPI_Init+0x100>)
 80006f2:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80006f6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1)); // GPIO speed=Medium(0b01)
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <SPI_Init+0x100>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000778 <SPI_Init+0x100>)
 80006fe:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 8000702:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2));
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <SPI_Init+0x100>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <SPI_Init+0x100>)
 800070a:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800070e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2)); // GPIO Pull-Down (0b10)
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <SPI_Init+0x100>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <SPI_Init+0x100>)
 8000716:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 800071a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <SPI_Init+0x100>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <SPI_Init+0x100>)
 8000722:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000726:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(SPI_MOSI_PIN)|BV(SPI_MISO_PIN)|BV(SPI_SCLK_PIN));	// GPIO push-pull
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <SPI_Init+0x100>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <SPI_Init+0x100>)
 800072e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8000732:	6053      	str	r3, [r2, #4]
	GPIOA->AFR[0] |= (SPI_ALT_FN << GPIO_AFRL_AFSEL5_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL6_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL7_Pos); /* BUG FIXED |= */
 8000734:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <SPI_Init+0x100>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <SPI_Init+0x100>)
 800073a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800073e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000742:	6213      	str	r3, [r2, #32]

	// SPI bus config
	// Enable SPI clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <SPI_Init+0xf8>)
 8000746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000748:	4a09      	ldr	r2, [pc, #36]	@ (8000770 <SPI_Init+0xf8>)
 800074a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800074e:	6453      	str	r3, [r2, #68]	@ 0x44
	// CR1: Master=1, BR=0x02(010), LSBF=0, DFF=0 (8-bit), CRCEN=0,
	//		SSM=1 & SSI=1 (Soft Slave Manage), BIDI=0 and RXONLY=0 for Full Duplex,
	//		CPOL=0 and CPHA=0 for LIS3DSH
	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (0x02 << SPI_CR1_BR_Pos);
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <SPI_Init+0x104>)
 8000752:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000756:	601a      	str	r2, [r3, #0]

	// CR2 = Motorola Frame, No intr enabled, No dma enabled, No SS output
	SPI1->CR2 = 0x0000;
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <SPI_Init+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SPI1->CR1 |= SPI_CR1_SPE; /*bug fixed |= */
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <SPI_Init+0x104>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a06      	ldr	r2, [pc, #24]	@ (800077c <SPI_Init+0x104>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000768:	6013      	str	r3, [r2, #0]
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40021000 	.word	0x40021000
 8000778:	40020000 	.word	0x40020000
 800077c:	40013000 	.word	0x40013000

08000780 <SPI_Transmit>:

uint16_t SPI_Transmit(uint8_t dataW) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	// wait while tx regr is not empty
	while(!(SPI1->SR & SPI_SR_TXE))
 800078a:	bf00      	nop
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <SPI_Transmit+0x44>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <SPI_Transmit+0xc>
		;
	// write given data into spi data regr
	uint32_t frame = dataW;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	60fb      	str	r3, [r7, #12]
	SPI1->DR = frame;
 800079c:	4a09      	ldr	r2, [pc, #36]	@ (80007c4 <SPI_Transmit+0x44>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	60d3      	str	r3, [r2, #12]
	// wait while rx regr is empty
	while(!(SPI1->SR & SPI_SR_RXNE))
 80007a2:	bf00      	nop
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <SPI_Transmit+0x44>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0f9      	beq.n	80007a4 <SPI_Transmit+0x24>
		;
	// read data from spi data regr
	frame = SPI1->DR;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <SPI_Transmit+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60fb      	str	r3, [r7, #12]
	return frame;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	b29b      	uxth	r3, r3
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40013000 	.word	0x40013000

080007c8 <SPI_Receive>:

uint16_t SPI_Receive(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
	// send dummy data (0x00) and receive data from slave
	uint32_t val = SPI_Transmit(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ffd6 	bl	8000780 <SPI_Transmit>
 80007d4:	4603      	mov	r3, r0
 80007d6:	607b      	str	r3, [r7, #4]
	// return received data
	return val;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b29b      	uxth	r3, r3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <SPI_CS_Enable>:

void SPI_CS_Enable(void) {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	// PE.3 = 0 (active low)
	GPIOE->BSRR = BV(SPI_CS_CLR_BIT);
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <SPI_CS_Enable+0x14>)
 80007ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007ee:	619a      	str	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000

080007fc <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	// PE.3 = 1 (active low)
	GPIOE->BSRR = BV(SPI_CS_SET_BIT);
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <SPI_CS_Disable+0x14>)
 8000802:	2208      	movs	r2, #8
 8000804:	619a      	str	r2, [r3, #24]
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f000 f89c 	bl	8000980 <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20020000 	.word	0x20020000
 8000874:	00000400 	.word	0x00000400
 8000878:	20000070 	.word	0x20000070
 800087c:	200001c0 	.word	0x200001c0

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  DWT_Init();
 8000884:	f000 f802 	bl	800088c <DWT_Init>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <DWT_Init+0x58>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <DWT_Init+0x58>)
 8000896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800089a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <DWT_Init+0x58>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <DWT_Init+0x58>)
 80008a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008a6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <DWT_Init+0x5c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <DWT_Init+0x5c>)
 80008ae:	f023 0301 	bic.w	r3, r3, #1
 80008b2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <DWT_Init+0x5c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	@ (80008e8 <DWT_Init+0x5c>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <DWT_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80008c6:	bf00      	nop
    __ASM volatile ("NOP");
 80008c8:	bf00      	nop
    __ASM volatile ("NOP");
 80008ca:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <DWT_Init+0x5c>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf0c      	ite	eq
 80008d4:	2301      	moveq	r3, #1
 80008d6:	2300      	movne	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000edf0 	.word	0xe000edf0
 80008e8:	e0001000 	.word	0xe0001000

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f7ff ffc6 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f000 f837 	bl	800098c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fe3d 	bl	800059c <main>

08000922 <LoopForever>:

LoopForever:
  b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000930:	080012e4 	.word	0x080012e4
  ldr r2, =_sbss
 8000934:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000938:	200001bc 	.word	0x200001bc

0800093c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <siprintf>:
 8000940:	b40e      	push	{r1, r2, r3}
 8000942:	b500      	push	{lr}
 8000944:	b09c      	sub	sp, #112	@ 0x70
 8000946:	ab1d      	add	r3, sp, #116	@ 0x74
 8000948:	9002      	str	r0, [sp, #8]
 800094a:	9006      	str	r0, [sp, #24]
 800094c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <siprintf+0x38>)
 8000952:	9107      	str	r1, [sp, #28]
 8000954:	9104      	str	r1, [sp, #16]
 8000956:	4909      	ldr	r1, [pc, #36]	@ (800097c <siprintf+0x3c>)
 8000958:	f853 2b04 	ldr.w	r2, [r3], #4
 800095c:	9105      	str	r1, [sp, #20]
 800095e:	6800      	ldr	r0, [r0, #0]
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	a902      	add	r1, sp, #8
 8000964:	f000 f98c 	bl	8000c80 <_svfiprintf_r>
 8000968:	9b02      	ldr	r3, [sp, #8]
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	b01c      	add	sp, #112	@ 0x70
 8000970:	f85d eb04 	ldr.w	lr, [sp], #4
 8000974:	b003      	add	sp, #12
 8000976:	4770      	bx	lr
 8000978:	20000004 	.word	0x20000004
 800097c:	ffff0208 	.word	0xffff0208

08000980 <__errno>:
 8000980:	4b01      	ldr	r3, [pc, #4]	@ (8000988 <__errno+0x8>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000004 	.word	0x20000004

0800098c <__libc_init_array>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	4d0d      	ldr	r5, [pc, #52]	@ (80009c4 <__libc_init_array+0x38>)
 8000990:	4c0d      	ldr	r4, [pc, #52]	@ (80009c8 <__libc_init_array+0x3c>)
 8000992:	1b64      	subs	r4, r4, r5
 8000994:	10a4      	asrs	r4, r4, #2
 8000996:	2600      	movs	r6, #0
 8000998:	42a6      	cmp	r6, r4
 800099a:	d109      	bne.n	80009b0 <__libc_init_array+0x24>
 800099c:	4d0b      	ldr	r5, [pc, #44]	@ (80009cc <__libc_init_array+0x40>)
 800099e:	4c0c      	ldr	r4, [pc, #48]	@ (80009d0 <__libc_init_array+0x44>)
 80009a0:	f000 fc66 	bl	8001270 <_init>
 80009a4:	1b64      	subs	r4, r4, r5
 80009a6:	10a4      	asrs	r4, r4, #2
 80009a8:	2600      	movs	r6, #0
 80009aa:	42a6      	cmp	r6, r4
 80009ac:	d105      	bne.n	80009ba <__libc_init_array+0x2e>
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b4:	4798      	blx	r3
 80009b6:	3601      	adds	r6, #1
 80009b8:	e7ee      	b.n	8000998 <__libc_init_array+0xc>
 80009ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80009be:	4798      	blx	r3
 80009c0:	3601      	adds	r6, #1
 80009c2:	e7f2      	b.n	80009aa <__libc_init_array+0x1e>
 80009c4:	080012dc 	.word	0x080012dc
 80009c8:	080012dc 	.word	0x080012dc
 80009cc:	080012dc 	.word	0x080012dc
 80009d0:	080012e0 	.word	0x080012e0

080009d4 <__retarget_lock_acquire_recursive>:
 80009d4:	4770      	bx	lr

080009d6 <__retarget_lock_release_recursive>:
 80009d6:	4770      	bx	lr

080009d8 <_free_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4605      	mov	r5, r0
 80009dc:	2900      	cmp	r1, #0
 80009de:	d041      	beq.n	8000a64 <_free_r+0x8c>
 80009e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009e4:	1f0c      	subs	r4, r1, #4
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bfb8      	it	lt
 80009ea:	18e4      	addlt	r4, r4, r3
 80009ec:	f000 f8e0 	bl	8000bb0 <__malloc_lock>
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <_free_r+0x90>)
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	b933      	cbnz	r3, 8000a04 <_free_r+0x2c>
 80009f6:	6063      	str	r3, [r4, #4]
 80009f8:	6014      	str	r4, [r2, #0]
 80009fa:	4628      	mov	r0, r5
 80009fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a00:	f000 b8dc 	b.w	8000bbc <__malloc_unlock>
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	d908      	bls.n	8000a1a <_free_r+0x42>
 8000a08:	6820      	ldr	r0, [r4, #0]
 8000a0a:	1821      	adds	r1, r4, r0
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	bf01      	itttt	eq
 8000a10:	6819      	ldreq	r1, [r3, #0]
 8000a12:	685b      	ldreq	r3, [r3, #4]
 8000a14:	1809      	addeq	r1, r1, r0
 8000a16:	6021      	streq	r1, [r4, #0]
 8000a18:	e7ed      	b.n	80009f6 <_free_r+0x1e>
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b10b      	cbz	r3, 8000a24 <_free_r+0x4c>
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	d9fa      	bls.n	8000a1a <_free_r+0x42>
 8000a24:	6811      	ldr	r1, [r2, #0]
 8000a26:	1850      	adds	r0, r2, r1
 8000a28:	42a0      	cmp	r0, r4
 8000a2a:	d10b      	bne.n	8000a44 <_free_r+0x6c>
 8000a2c:	6820      	ldr	r0, [r4, #0]
 8000a2e:	4401      	add	r1, r0
 8000a30:	1850      	adds	r0, r2, r1
 8000a32:	4283      	cmp	r3, r0
 8000a34:	6011      	str	r1, [r2, #0]
 8000a36:	d1e0      	bne.n	80009fa <_free_r+0x22>
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	6053      	str	r3, [r2, #4]
 8000a3e:	4408      	add	r0, r1
 8000a40:	6010      	str	r0, [r2, #0]
 8000a42:	e7da      	b.n	80009fa <_free_r+0x22>
 8000a44:	d902      	bls.n	8000a4c <_free_r+0x74>
 8000a46:	230c      	movs	r3, #12
 8000a48:	602b      	str	r3, [r5, #0]
 8000a4a:	e7d6      	b.n	80009fa <_free_r+0x22>
 8000a4c:	6820      	ldr	r0, [r4, #0]
 8000a4e:	1821      	adds	r1, r4, r0
 8000a50:	428b      	cmp	r3, r1
 8000a52:	bf04      	itt	eq
 8000a54:	6819      	ldreq	r1, [r3, #0]
 8000a56:	685b      	ldreq	r3, [r3, #4]
 8000a58:	6063      	str	r3, [r4, #4]
 8000a5a:	bf04      	itt	eq
 8000a5c:	1809      	addeq	r1, r1, r0
 8000a5e:	6021      	streq	r1, [r4, #0]
 8000a60:	6054      	str	r4, [r2, #4]
 8000a62:	e7ca      	b.n	80009fa <_free_r+0x22>
 8000a64:	bd38      	pop	{r3, r4, r5, pc}
 8000a66:	bf00      	nop
 8000a68:	200001b8 	.word	0x200001b8

08000a6c <sbrk_aligned>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000aac <sbrk_aligned+0x40>)
 8000a70:	460c      	mov	r4, r1
 8000a72:	6831      	ldr	r1, [r6, #0]
 8000a74:	4605      	mov	r5, r0
 8000a76:	b911      	cbnz	r1, 8000a7e <sbrk_aligned+0x12>
 8000a78:	f000 fba6 	bl	80011c8 <_sbrk_r>
 8000a7c:	6030      	str	r0, [r6, #0]
 8000a7e:	4621      	mov	r1, r4
 8000a80:	4628      	mov	r0, r5
 8000a82:	f000 fba1 	bl	80011c8 <_sbrk_r>
 8000a86:	1c43      	adds	r3, r0, #1
 8000a88:	d103      	bne.n	8000a92 <sbrk_aligned+0x26>
 8000a8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a8e:	4620      	mov	r0, r4
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	1cc4      	adds	r4, r0, #3
 8000a94:	f024 0403 	bic.w	r4, r4, #3
 8000a98:	42a0      	cmp	r0, r4
 8000a9a:	d0f8      	beq.n	8000a8e <sbrk_aligned+0x22>
 8000a9c:	1a21      	subs	r1, r4, r0
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	f000 fb92 	bl	80011c8 <_sbrk_r>
 8000aa4:	3001      	adds	r0, #1
 8000aa6:	d1f2      	bne.n	8000a8e <sbrk_aligned+0x22>
 8000aa8:	e7ef      	b.n	8000a8a <sbrk_aligned+0x1e>
 8000aaa:	bf00      	nop
 8000aac:	200001b4 	.word	0x200001b4

08000ab0 <_malloc_r>:
 8000ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ab4:	1ccd      	adds	r5, r1, #3
 8000ab6:	f025 0503 	bic.w	r5, r5, #3
 8000aba:	3508      	adds	r5, #8
 8000abc:	2d0c      	cmp	r5, #12
 8000abe:	bf38      	it	cc
 8000ac0:	250c      	movcc	r5, #12
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	db01      	blt.n	8000acc <_malloc_r+0x1c>
 8000ac8:	42a9      	cmp	r1, r5
 8000aca:	d904      	bls.n	8000ad6 <_malloc_r+0x26>
 8000acc:	230c      	movs	r3, #12
 8000ace:	6033      	str	r3, [r6, #0]
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bac <_malloc_r+0xfc>
 8000ada:	f000 f869 	bl	8000bb0 <__malloc_lock>
 8000ade:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae2:	461c      	mov	r4, r3
 8000ae4:	bb44      	cbnz	r4, 8000b38 <_malloc_r+0x88>
 8000ae6:	4629      	mov	r1, r5
 8000ae8:	4630      	mov	r0, r6
 8000aea:	f7ff ffbf 	bl	8000a6c <sbrk_aligned>
 8000aee:	1c43      	adds	r3, r0, #1
 8000af0:	4604      	mov	r4, r0
 8000af2:	d158      	bne.n	8000ba6 <_malloc_r+0xf6>
 8000af4:	f8d8 4000 	ldr.w	r4, [r8]
 8000af8:	4627      	mov	r7, r4
 8000afa:	2f00      	cmp	r7, #0
 8000afc:	d143      	bne.n	8000b86 <_malloc_r+0xd6>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d04b      	beq.n	8000b9a <_malloc_r+0xea>
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	4639      	mov	r1, r7
 8000b06:	4630      	mov	r0, r6
 8000b08:	eb04 0903 	add.w	r9, r4, r3
 8000b0c:	f000 fb5c 	bl	80011c8 <_sbrk_r>
 8000b10:	4581      	cmp	r9, r0
 8000b12:	d142      	bne.n	8000b9a <_malloc_r+0xea>
 8000b14:	6821      	ldr	r1, [r4, #0]
 8000b16:	1a6d      	subs	r5, r5, r1
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f7ff ffa6 	bl	8000a6c <sbrk_aligned>
 8000b20:	3001      	adds	r0, #1
 8000b22:	d03a      	beq.n	8000b9a <_malloc_r+0xea>
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	442b      	add	r3, r5
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	bb62      	cbnz	r2, 8000b8c <_malloc_r+0xdc>
 8000b32:	f8c8 7000 	str.w	r7, [r8]
 8000b36:	e00f      	b.n	8000b58 <_malloc_r+0xa8>
 8000b38:	6822      	ldr	r2, [r4, #0]
 8000b3a:	1b52      	subs	r2, r2, r5
 8000b3c:	d420      	bmi.n	8000b80 <_malloc_r+0xd0>
 8000b3e:	2a0b      	cmp	r2, #11
 8000b40:	d917      	bls.n	8000b72 <_malloc_r+0xc2>
 8000b42:	1961      	adds	r1, r4, r5
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	6025      	str	r5, [r4, #0]
 8000b48:	bf18      	it	ne
 8000b4a:	6059      	strne	r1, [r3, #4]
 8000b4c:	6863      	ldr	r3, [r4, #4]
 8000b4e:	bf08      	it	eq
 8000b50:	f8c8 1000 	streq.w	r1, [r8]
 8000b54:	5162      	str	r2, [r4, r5]
 8000b56:	604b      	str	r3, [r1, #4]
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f000 f82f 	bl	8000bbc <__malloc_unlock>
 8000b5e:	f104 000b 	add.w	r0, r4, #11
 8000b62:	1d23      	adds	r3, r4, #4
 8000b64:	f020 0007 	bic.w	r0, r0, #7
 8000b68:	1ac2      	subs	r2, r0, r3
 8000b6a:	bf1c      	itt	ne
 8000b6c:	1a1b      	subne	r3, r3, r0
 8000b6e:	50a3      	strne	r3, [r4, r2]
 8000b70:	e7af      	b.n	8000ad2 <_malloc_r+0x22>
 8000b72:	6862      	ldr	r2, [r4, #4]
 8000b74:	42a3      	cmp	r3, r4
 8000b76:	bf0c      	ite	eq
 8000b78:	f8c8 2000 	streq.w	r2, [r8]
 8000b7c:	605a      	strne	r2, [r3, #4]
 8000b7e:	e7eb      	b.n	8000b58 <_malloc_r+0xa8>
 8000b80:	4623      	mov	r3, r4
 8000b82:	6864      	ldr	r4, [r4, #4]
 8000b84:	e7ae      	b.n	8000ae4 <_malloc_r+0x34>
 8000b86:	463c      	mov	r4, r7
 8000b88:	687f      	ldr	r7, [r7, #4]
 8000b8a:	e7b6      	b.n	8000afa <_malloc_r+0x4a>
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	42a3      	cmp	r3, r4
 8000b92:	d1fb      	bne.n	8000b8c <_malloc_r+0xdc>
 8000b94:	2300      	movs	r3, #0
 8000b96:	6053      	str	r3, [r2, #4]
 8000b98:	e7de      	b.n	8000b58 <_malloc_r+0xa8>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	6033      	str	r3, [r6, #0]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	f000 f80c 	bl	8000bbc <__malloc_unlock>
 8000ba4:	e794      	b.n	8000ad0 <_malloc_r+0x20>
 8000ba6:	6005      	str	r5, [r0, #0]
 8000ba8:	e7d6      	b.n	8000b58 <_malloc_r+0xa8>
 8000baa:	bf00      	nop
 8000bac:	200001b8 	.word	0x200001b8

08000bb0 <__malloc_lock>:
 8000bb0:	4801      	ldr	r0, [pc, #4]	@ (8000bb8 <__malloc_lock+0x8>)
 8000bb2:	f7ff bf0f 	b.w	80009d4 <__retarget_lock_acquire_recursive>
 8000bb6:	bf00      	nop
 8000bb8:	200001b0 	.word	0x200001b0

08000bbc <__malloc_unlock>:
 8000bbc:	4801      	ldr	r0, [pc, #4]	@ (8000bc4 <__malloc_unlock+0x8>)
 8000bbe:	f7ff bf0a 	b.w	80009d6 <__retarget_lock_release_recursive>
 8000bc2:	bf00      	nop
 8000bc4:	200001b0 	.word	0x200001b0

08000bc8 <__ssputs_r>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	688e      	ldr	r6, [r1, #8]
 8000bce:	461f      	mov	r7, r3
 8000bd0:	42be      	cmp	r6, r7
 8000bd2:	680b      	ldr	r3, [r1, #0]
 8000bd4:	4682      	mov	sl, r0
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	4690      	mov	r8, r2
 8000bda:	d82d      	bhi.n	8000c38 <__ssputs_r+0x70>
 8000bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000be0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000be4:	d026      	beq.n	8000c34 <__ssputs_r+0x6c>
 8000be6:	6965      	ldr	r5, [r4, #20]
 8000be8:	6909      	ldr	r1, [r1, #16]
 8000bea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bee:	eba3 0901 	sub.w	r9, r3, r1
 8000bf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000bf6:	1c7b      	adds	r3, r7, #1
 8000bf8:	444b      	add	r3, r9
 8000bfa:	106d      	asrs	r5, r5, #1
 8000bfc:	429d      	cmp	r5, r3
 8000bfe:	bf38      	it	cc
 8000c00:	461d      	movcc	r5, r3
 8000c02:	0553      	lsls	r3, r2, #21
 8000c04:	d527      	bpl.n	8000c56 <__ssputs_r+0x8e>
 8000c06:	4629      	mov	r1, r5
 8000c08:	f7ff ff52 	bl	8000ab0 <_malloc_r>
 8000c0c:	4606      	mov	r6, r0
 8000c0e:	b360      	cbz	r0, 8000c6a <__ssputs_r+0xa2>
 8000c10:	6921      	ldr	r1, [r4, #16]
 8000c12:	464a      	mov	r2, r9
 8000c14:	f000 fae8 	bl	80011e8 <memcpy>
 8000c18:	89a3      	ldrh	r3, [r4, #12]
 8000c1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c22:	81a3      	strh	r3, [r4, #12]
 8000c24:	6126      	str	r6, [r4, #16]
 8000c26:	6165      	str	r5, [r4, #20]
 8000c28:	444e      	add	r6, r9
 8000c2a:	eba5 0509 	sub.w	r5, r5, r9
 8000c2e:	6026      	str	r6, [r4, #0]
 8000c30:	60a5      	str	r5, [r4, #8]
 8000c32:	463e      	mov	r6, r7
 8000c34:	42be      	cmp	r6, r7
 8000c36:	d900      	bls.n	8000c3a <__ssputs_r+0x72>
 8000c38:	463e      	mov	r6, r7
 8000c3a:	6820      	ldr	r0, [r4, #0]
 8000c3c:	4632      	mov	r2, r6
 8000c3e:	4641      	mov	r1, r8
 8000c40:	f000 faa8 	bl	8001194 <memmove>
 8000c44:	68a3      	ldr	r3, [r4, #8]
 8000c46:	1b9b      	subs	r3, r3, r6
 8000c48:	60a3      	str	r3, [r4, #8]
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	4433      	add	r3, r6
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	2000      	movs	r0, #0
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462a      	mov	r2, r5
 8000c58:	f000 fad4 	bl	8001204 <_realloc_r>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d1e0      	bne.n	8000c24 <__ssputs_r+0x5c>
 8000c62:	6921      	ldr	r1, [r4, #16]
 8000c64:	4650      	mov	r0, sl
 8000c66:	f7ff feb7 	bl	80009d8 <_free_r>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	f8ca 3000 	str.w	r3, [sl]
 8000c70:	89a3      	ldrh	r3, [r4, #12]
 8000c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c76:	81a3      	strh	r3, [r4, #12]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	e7e9      	b.n	8000c52 <__ssputs_r+0x8a>
	...

08000c80 <_svfiprintf_r>:
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	4698      	mov	r8, r3
 8000c86:	898b      	ldrh	r3, [r1, #12]
 8000c88:	061b      	lsls	r3, r3, #24
 8000c8a:	b09d      	sub	sp, #116	@ 0x74
 8000c8c:	4607      	mov	r7, r0
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4614      	mov	r4, r2
 8000c92:	d510      	bpl.n	8000cb6 <_svfiprintf_r+0x36>
 8000c94:	690b      	ldr	r3, [r1, #16]
 8000c96:	b973      	cbnz	r3, 8000cb6 <_svfiprintf_r+0x36>
 8000c98:	2140      	movs	r1, #64	@ 0x40
 8000c9a:	f7ff ff09 	bl	8000ab0 <_malloc_r>
 8000c9e:	6028      	str	r0, [r5, #0]
 8000ca0:	6128      	str	r0, [r5, #16]
 8000ca2:	b930      	cbnz	r0, 8000cb2 <_svfiprintf_r+0x32>
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cac:	b01d      	add	sp, #116	@ 0x74
 8000cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb2:	2340      	movs	r3, #64	@ 0x40
 8000cb4:	616b      	str	r3, [r5, #20]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cba:	2320      	movs	r3, #32
 8000cbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cc4:	2330      	movs	r3, #48	@ 0x30
 8000cc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000e64 <_svfiprintf_r+0x1e4>
 8000cca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cce:	f04f 0901 	mov.w	r9, #1
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cda:	b10a      	cbz	r2, 8000ce0 <_svfiprintf_r+0x60>
 8000cdc:	2a25      	cmp	r2, #37	@ 0x25
 8000cde:	d1f9      	bne.n	8000cd4 <_svfiprintf_r+0x54>
 8000ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8000ce4:	d00b      	beq.n	8000cfe <_svfiprintf_r+0x7e>
 8000ce6:	465b      	mov	r3, fp
 8000ce8:	4622      	mov	r2, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	4638      	mov	r0, r7
 8000cee:	f7ff ff6b 	bl	8000bc8 <__ssputs_r>
 8000cf2:	3001      	adds	r0, #1
 8000cf4:	f000 80a7 	beq.w	8000e46 <_svfiprintf_r+0x1c6>
 8000cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cfa:	445a      	add	r2, fp
 8000cfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 809f 	beq.w	8000e46 <_svfiprintf_r+0x1c6>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d12:	f10a 0a01 	add.w	sl, sl, #1
 8000d16:	9304      	str	r3, [sp, #16]
 8000d18:	9307      	str	r3, [sp, #28]
 8000d1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d20:	4654      	mov	r4, sl
 8000d22:	2205      	movs	r2, #5
 8000d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d28:	484e      	ldr	r0, [pc, #312]	@ (8000e64 <_svfiprintf_r+0x1e4>)
 8000d2a:	f7ff fa51 	bl	80001d0 <memchr>
 8000d2e:	9a04      	ldr	r2, [sp, #16]
 8000d30:	b9d8      	cbnz	r0, 8000d6a <_svfiprintf_r+0xea>
 8000d32:	06d0      	lsls	r0, r2, #27
 8000d34:	bf44      	itt	mi
 8000d36:	2320      	movmi	r3, #32
 8000d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d3c:	0711      	lsls	r1, r2, #28
 8000d3e:	bf44      	itt	mi
 8000d40:	232b      	movmi	r3, #43	@ 0x2b
 8000d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d46:	f89a 3000 	ldrb.w	r3, [sl]
 8000d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d4c:	d015      	beq.n	8000d7a <_svfiprintf_r+0xfa>
 8000d4e:	9a07      	ldr	r2, [sp, #28]
 8000d50:	4654      	mov	r4, sl
 8000d52:	2000      	movs	r0, #0
 8000d54:	f04f 0c0a 	mov.w	ip, #10
 8000d58:	4621      	mov	r1, r4
 8000d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d5e:	3b30      	subs	r3, #48	@ 0x30
 8000d60:	2b09      	cmp	r3, #9
 8000d62:	d94b      	bls.n	8000dfc <_svfiprintf_r+0x17c>
 8000d64:	b1b0      	cbz	r0, 8000d94 <_svfiprintf_r+0x114>
 8000d66:	9207      	str	r2, [sp, #28]
 8000d68:	e014      	b.n	8000d94 <_svfiprintf_r+0x114>
 8000d6a:	eba0 0308 	sub.w	r3, r0, r8
 8000d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	9304      	str	r3, [sp, #16]
 8000d76:	46a2      	mov	sl, r4
 8000d78:	e7d2      	b.n	8000d20 <_svfiprintf_r+0xa0>
 8000d7a:	9b03      	ldr	r3, [sp, #12]
 8000d7c:	1d19      	adds	r1, r3, #4
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	9103      	str	r1, [sp, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bfbb      	ittet	lt
 8000d86:	425b      	neglt	r3, r3
 8000d88:	f042 0202 	orrlt.w	r2, r2, #2
 8000d8c:	9307      	strge	r3, [sp, #28]
 8000d8e:	9307      	strlt	r3, [sp, #28]
 8000d90:	bfb8      	it	lt
 8000d92:	9204      	strlt	r2, [sp, #16]
 8000d94:	7823      	ldrb	r3, [r4, #0]
 8000d96:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d98:	d10a      	bne.n	8000db0 <_svfiprintf_r+0x130>
 8000d9a:	7863      	ldrb	r3, [r4, #1]
 8000d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d9e:	d132      	bne.n	8000e06 <_svfiprintf_r+0x186>
 8000da0:	9b03      	ldr	r3, [sp, #12]
 8000da2:	1d1a      	adds	r2, r3, #4
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	9203      	str	r2, [sp, #12]
 8000da8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dac:	3402      	adds	r4, #2
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000e68 <_svfiprintf_r+0x1e8>
 8000db4:	7821      	ldrb	r1, [r4, #0]
 8000db6:	2203      	movs	r2, #3
 8000db8:	4650      	mov	r0, sl
 8000dba:	f7ff fa09 	bl	80001d0 <memchr>
 8000dbe:	b138      	cbz	r0, 8000dd0 <_svfiprintf_r+0x150>
 8000dc0:	9b04      	ldr	r3, [sp, #16]
 8000dc2:	eba0 000a 	sub.w	r0, r0, sl
 8000dc6:	2240      	movs	r2, #64	@ 0x40
 8000dc8:	4082      	lsls	r2, r0
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	3401      	adds	r4, #1
 8000dce:	9304      	str	r3, [sp, #16]
 8000dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dd4:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <_svfiprintf_r+0x1ec>)
 8000dd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dda:	2206      	movs	r2, #6
 8000ddc:	f7ff f9f8 	bl	80001d0 <memchr>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d036      	beq.n	8000e52 <_svfiprintf_r+0x1d2>
 8000de4:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <_svfiprintf_r+0x1f0>)
 8000de6:	bb1b      	cbnz	r3, 8000e30 <_svfiprintf_r+0x1b0>
 8000de8:	9b03      	ldr	r3, [sp, #12]
 8000dea:	3307      	adds	r3, #7
 8000dec:	f023 0307 	bic.w	r3, r3, #7
 8000df0:	3308      	adds	r3, #8
 8000df2:	9303      	str	r3, [sp, #12]
 8000df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000df6:	4433      	add	r3, r6
 8000df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dfa:	e76a      	b.n	8000cd2 <_svfiprintf_r+0x52>
 8000dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e00:	460c      	mov	r4, r1
 8000e02:	2001      	movs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <_svfiprintf_r+0xd8>
 8000e06:	2300      	movs	r3, #0
 8000e08:	3401      	adds	r4, #1
 8000e0a:	9305      	str	r3, [sp, #20]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 0c0a 	mov.w	ip, #10
 8000e12:	4620      	mov	r0, r4
 8000e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e18:	3a30      	subs	r2, #48	@ 0x30
 8000e1a:	2a09      	cmp	r2, #9
 8000e1c:	d903      	bls.n	8000e26 <_svfiprintf_r+0x1a6>
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0c6      	beq.n	8000db0 <_svfiprintf_r+0x130>
 8000e22:	9105      	str	r1, [sp, #20]
 8000e24:	e7c4      	b.n	8000db0 <_svfiprintf_r+0x130>
 8000e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e7f0      	b.n	8000e12 <_svfiprintf_r+0x192>
 8000e30:	ab03      	add	r3, sp, #12
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	462a      	mov	r2, r5
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <_svfiprintf_r+0x1f4>)
 8000e38:	a904      	add	r1, sp, #16
 8000e3a:	4638      	mov	r0, r7
 8000e3c:	f3af 8000 	nop.w
 8000e40:	1c42      	adds	r2, r0, #1
 8000e42:	4606      	mov	r6, r0
 8000e44:	d1d6      	bne.n	8000df4 <_svfiprintf_r+0x174>
 8000e46:	89ab      	ldrh	r3, [r5, #12]
 8000e48:	065b      	lsls	r3, r3, #25
 8000e4a:	f53f af2d 	bmi.w	8000ca8 <_svfiprintf_r+0x28>
 8000e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e50:	e72c      	b.n	8000cac <_svfiprintf_r+0x2c>
 8000e52:	ab03      	add	r3, sp, #12
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	462a      	mov	r2, r5
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <_svfiprintf_r+0x1f4>)
 8000e5a:	a904      	add	r1, sp, #16
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	f000 f879 	bl	8000f54 <_printf_i>
 8000e62:	e7ed      	b.n	8000e40 <_svfiprintf_r+0x1c0>
 8000e64:	0800129f 	.word	0x0800129f
 8000e68:	080012a5 	.word	0x080012a5
 8000e6c:	080012a9 	.word	0x080012a9
 8000e70:	00000000 	.word	0x00000000
 8000e74:	08000bc9 	.word	0x08000bc9

08000e78 <_printf_common>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	4616      	mov	r6, r2
 8000e7e:	4698      	mov	r8, r3
 8000e80:	688a      	ldr	r2, [r1, #8]
 8000e82:	690b      	ldr	r3, [r1, #16]
 8000e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	bfb8      	it	lt
 8000e8c:	4613      	movlt	r3, r2
 8000e8e:	6033      	str	r3, [r6, #0]
 8000e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e94:	4607      	mov	r7, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	b10a      	cbz	r2, 8000e9e <_printf_common+0x26>
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	6033      	str	r3, [r6, #0]
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	0699      	lsls	r1, r3, #26
 8000ea2:	bf42      	ittt	mi
 8000ea4:	6833      	ldrmi	r3, [r6, #0]
 8000ea6:	3302      	addmi	r3, #2
 8000ea8:	6033      	strmi	r3, [r6, #0]
 8000eaa:	6825      	ldr	r5, [r4, #0]
 8000eac:	f015 0506 	ands.w	r5, r5, #6
 8000eb0:	d106      	bne.n	8000ec0 <_printf_common+0x48>
 8000eb2:	f104 0a19 	add.w	sl, r4, #25
 8000eb6:	68e3      	ldr	r3, [r4, #12]
 8000eb8:	6832      	ldr	r2, [r6, #0]
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	42ab      	cmp	r3, r5
 8000ebe:	dc26      	bgt.n	8000f0e <_printf_common+0x96>
 8000ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ec4:	6822      	ldr	r2, [r4, #0]
 8000ec6:	3b00      	subs	r3, #0
 8000ec8:	bf18      	it	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	0692      	lsls	r2, r2, #26
 8000ece:	d42b      	bmi.n	8000f28 <_printf_common+0xb0>
 8000ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ed4:	4641      	mov	r1, r8
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	47c8      	blx	r9
 8000eda:	3001      	adds	r0, #1
 8000edc:	d01e      	beq.n	8000f1c <_printf_common+0xa4>
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	6922      	ldr	r2, [r4, #16]
 8000ee2:	f003 0306 	and.w	r3, r3, #6
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf02      	ittt	eq
 8000eea:	68e5      	ldreq	r5, [r4, #12]
 8000eec:	6833      	ldreq	r3, [r6, #0]
 8000eee:	1aed      	subeq	r5, r5, r3
 8000ef0:	68a3      	ldr	r3, [r4, #8]
 8000ef2:	bf0c      	ite	eq
 8000ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ef8:	2500      	movne	r5, #0
 8000efa:	4293      	cmp	r3, r2
 8000efc:	bfc4      	itt	gt
 8000efe:	1a9b      	subgt	r3, r3, r2
 8000f00:	18ed      	addgt	r5, r5, r3
 8000f02:	2600      	movs	r6, #0
 8000f04:	341a      	adds	r4, #26
 8000f06:	42b5      	cmp	r5, r6
 8000f08:	d11a      	bne.n	8000f40 <_printf_common+0xc8>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e008      	b.n	8000f20 <_printf_common+0xa8>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4652      	mov	r2, sl
 8000f12:	4641      	mov	r1, r8
 8000f14:	4638      	mov	r0, r7
 8000f16:	47c8      	blx	r9
 8000f18:	3001      	adds	r0, #1
 8000f1a:	d103      	bne.n	8000f24 <_printf_common+0xac>
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	3501      	adds	r5, #1
 8000f26:	e7c6      	b.n	8000eb6 <_printf_common+0x3e>
 8000f28:	18e1      	adds	r1, r4, r3
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	2030      	movs	r0, #48	@ 0x30
 8000f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f32:	4422      	add	r2, r4
 8000f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	e7c7      	b.n	8000ed0 <_printf_common+0x58>
 8000f40:	2301      	movs	r3, #1
 8000f42:	4622      	mov	r2, r4
 8000f44:	4641      	mov	r1, r8
 8000f46:	4638      	mov	r0, r7
 8000f48:	47c8      	blx	r9
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	d0e6      	beq.n	8000f1c <_printf_common+0xa4>
 8000f4e:	3601      	adds	r6, #1
 8000f50:	e7d9      	b.n	8000f06 <_printf_common+0x8e>
	...

08000f54 <_printf_i>:
 8000f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f58:	7e0f      	ldrb	r7, [r1, #24]
 8000f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f5c:	2f78      	cmp	r7, #120	@ 0x78
 8000f5e:	4691      	mov	r9, r2
 8000f60:	4680      	mov	r8, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	469a      	mov	sl, r3
 8000f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f6a:	d807      	bhi.n	8000f7c <_printf_i+0x28>
 8000f6c:	2f62      	cmp	r7, #98	@ 0x62
 8000f6e:	d80a      	bhi.n	8000f86 <_printf_i+0x32>
 8000f70:	2f00      	cmp	r7, #0
 8000f72:	f000 80d2 	beq.w	800111a <_printf_i+0x1c6>
 8000f76:	2f58      	cmp	r7, #88	@ 0x58
 8000f78:	f000 80b9 	beq.w	80010ee <_printf_i+0x19a>
 8000f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f84:	e03a      	b.n	8000ffc <_printf_i+0xa8>
 8000f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f8a:	2b15      	cmp	r3, #21
 8000f8c:	d8f6      	bhi.n	8000f7c <_printf_i+0x28>
 8000f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8000f94 <_printf_i+0x40>)
 8000f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f94:	08000fed 	.word	0x08000fed
 8000f98:	08001001 	.word	0x08001001
 8000f9c:	08000f7d 	.word	0x08000f7d
 8000fa0:	08000f7d 	.word	0x08000f7d
 8000fa4:	08000f7d 	.word	0x08000f7d
 8000fa8:	08000f7d 	.word	0x08000f7d
 8000fac:	08001001 	.word	0x08001001
 8000fb0:	08000f7d 	.word	0x08000f7d
 8000fb4:	08000f7d 	.word	0x08000f7d
 8000fb8:	08000f7d 	.word	0x08000f7d
 8000fbc:	08000f7d 	.word	0x08000f7d
 8000fc0:	08001101 	.word	0x08001101
 8000fc4:	0800102b 	.word	0x0800102b
 8000fc8:	080010bb 	.word	0x080010bb
 8000fcc:	08000f7d 	.word	0x08000f7d
 8000fd0:	08000f7d 	.word	0x08000f7d
 8000fd4:	08001123 	.word	0x08001123
 8000fd8:	08000f7d 	.word	0x08000f7d
 8000fdc:	0800102b 	.word	0x0800102b
 8000fe0:	08000f7d 	.word	0x08000f7d
 8000fe4:	08000f7d 	.word	0x08000f7d
 8000fe8:	080010c3 	.word	0x080010c3
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	1d1a      	adds	r2, r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6032      	str	r2, [r6, #0]
 8000ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e09d      	b.n	800113c <_printf_i+0x1e8>
 8001000:	6833      	ldr	r3, [r6, #0]
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	1d19      	adds	r1, r3, #4
 8001006:	6031      	str	r1, [r6, #0]
 8001008:	0606      	lsls	r6, r0, #24
 800100a:	d501      	bpl.n	8001010 <_printf_i+0xbc>
 800100c:	681d      	ldr	r5, [r3, #0]
 800100e:	e003      	b.n	8001018 <_printf_i+0xc4>
 8001010:	0645      	lsls	r5, r0, #25
 8001012:	d5fb      	bpl.n	800100c <_printf_i+0xb8>
 8001014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001018:	2d00      	cmp	r5, #0
 800101a:	da03      	bge.n	8001024 <_printf_i+0xd0>
 800101c:	232d      	movs	r3, #45	@ 0x2d
 800101e:	426d      	negs	r5, r5
 8001020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001024:	4859      	ldr	r0, [pc, #356]	@ (800118c <_printf_i+0x238>)
 8001026:	230a      	movs	r3, #10
 8001028:	e011      	b.n	800104e <_printf_i+0xfa>
 800102a:	6821      	ldr	r1, [r4, #0]
 800102c:	6833      	ldr	r3, [r6, #0]
 800102e:	0608      	lsls	r0, r1, #24
 8001030:	f853 5b04 	ldr.w	r5, [r3], #4
 8001034:	d402      	bmi.n	800103c <_printf_i+0xe8>
 8001036:	0649      	lsls	r1, r1, #25
 8001038:	bf48      	it	mi
 800103a:	b2ad      	uxthmi	r5, r5
 800103c:	2f6f      	cmp	r7, #111	@ 0x6f
 800103e:	4853      	ldr	r0, [pc, #332]	@ (800118c <_printf_i+0x238>)
 8001040:	6033      	str	r3, [r6, #0]
 8001042:	bf14      	ite	ne
 8001044:	230a      	movne	r3, #10
 8001046:	2308      	moveq	r3, #8
 8001048:	2100      	movs	r1, #0
 800104a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800104e:	6866      	ldr	r6, [r4, #4]
 8001050:	60a6      	str	r6, [r4, #8]
 8001052:	2e00      	cmp	r6, #0
 8001054:	bfa2      	ittt	ge
 8001056:	6821      	ldrge	r1, [r4, #0]
 8001058:	f021 0104 	bicge.w	r1, r1, #4
 800105c:	6021      	strge	r1, [r4, #0]
 800105e:	b90d      	cbnz	r5, 8001064 <_printf_i+0x110>
 8001060:	2e00      	cmp	r6, #0
 8001062:	d04b      	beq.n	80010fc <_printf_i+0x1a8>
 8001064:	4616      	mov	r6, r2
 8001066:	fbb5 f1f3 	udiv	r1, r5, r3
 800106a:	fb03 5711 	mls	r7, r3, r1, r5
 800106e:	5dc7      	ldrb	r7, [r0, r7]
 8001070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001074:	462f      	mov	r7, r5
 8001076:	42bb      	cmp	r3, r7
 8001078:	460d      	mov	r5, r1
 800107a:	d9f4      	bls.n	8001066 <_printf_i+0x112>
 800107c:	2b08      	cmp	r3, #8
 800107e:	d10b      	bne.n	8001098 <_printf_i+0x144>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	07df      	lsls	r7, r3, #31
 8001084:	d508      	bpl.n	8001098 <_printf_i+0x144>
 8001086:	6923      	ldr	r3, [r4, #16]
 8001088:	6861      	ldr	r1, [r4, #4]
 800108a:	4299      	cmp	r1, r3
 800108c:	bfde      	ittt	le
 800108e:	2330      	movle	r3, #48	@ 0x30
 8001090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001094:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001098:	1b92      	subs	r2, r2, r6
 800109a:	6122      	str	r2, [r4, #16]
 800109c:	f8cd a000 	str.w	sl, [sp]
 80010a0:	464b      	mov	r3, r9
 80010a2:	aa03      	add	r2, sp, #12
 80010a4:	4621      	mov	r1, r4
 80010a6:	4640      	mov	r0, r8
 80010a8:	f7ff fee6 	bl	8000e78 <_printf_common>
 80010ac:	3001      	adds	r0, #1
 80010ae:	d14a      	bne.n	8001146 <_printf_i+0x1f2>
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b4:	b004      	add	sp, #16
 80010b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	6023      	str	r3, [r4, #0]
 80010c2:	4833      	ldr	r0, [pc, #204]	@ (8001190 <_printf_i+0x23c>)
 80010c4:	2778      	movs	r7, #120	@ 0x78
 80010c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	6831      	ldr	r1, [r6, #0]
 80010ce:	061f      	lsls	r7, r3, #24
 80010d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80010d4:	d402      	bmi.n	80010dc <_printf_i+0x188>
 80010d6:	065f      	lsls	r7, r3, #25
 80010d8:	bf48      	it	mi
 80010da:	b2ad      	uxthmi	r5, r5
 80010dc:	6031      	str	r1, [r6, #0]
 80010de:	07d9      	lsls	r1, r3, #31
 80010e0:	bf44      	itt	mi
 80010e2:	f043 0320 	orrmi.w	r3, r3, #32
 80010e6:	6023      	strmi	r3, [r4, #0]
 80010e8:	b11d      	cbz	r5, 80010f2 <_printf_i+0x19e>
 80010ea:	2310      	movs	r3, #16
 80010ec:	e7ac      	b.n	8001048 <_printf_i+0xf4>
 80010ee:	4827      	ldr	r0, [pc, #156]	@ (800118c <_printf_i+0x238>)
 80010f0:	e7e9      	b.n	80010c6 <_printf_i+0x172>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	f023 0320 	bic.w	r3, r3, #32
 80010f8:	6023      	str	r3, [r4, #0]
 80010fa:	e7f6      	b.n	80010ea <_printf_i+0x196>
 80010fc:	4616      	mov	r6, r2
 80010fe:	e7bd      	b.n	800107c <_printf_i+0x128>
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	6825      	ldr	r5, [r4, #0]
 8001104:	6961      	ldr	r1, [r4, #20]
 8001106:	1d18      	adds	r0, r3, #4
 8001108:	6030      	str	r0, [r6, #0]
 800110a:	062e      	lsls	r6, r5, #24
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	d501      	bpl.n	8001114 <_printf_i+0x1c0>
 8001110:	6019      	str	r1, [r3, #0]
 8001112:	e002      	b.n	800111a <_printf_i+0x1c6>
 8001114:	0668      	lsls	r0, r5, #25
 8001116:	d5fb      	bpl.n	8001110 <_printf_i+0x1bc>
 8001118:	8019      	strh	r1, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	6123      	str	r3, [r4, #16]
 800111e:	4616      	mov	r6, r2
 8001120:	e7bc      	b.n	800109c <_printf_i+0x148>
 8001122:	6833      	ldr	r3, [r6, #0]
 8001124:	1d1a      	adds	r2, r3, #4
 8001126:	6032      	str	r2, [r6, #0]
 8001128:	681e      	ldr	r6, [r3, #0]
 800112a:	6862      	ldr	r2, [r4, #4]
 800112c:	2100      	movs	r1, #0
 800112e:	4630      	mov	r0, r6
 8001130:	f7ff f84e 	bl	80001d0 <memchr>
 8001134:	b108      	cbz	r0, 800113a <_printf_i+0x1e6>
 8001136:	1b80      	subs	r0, r0, r6
 8001138:	6060      	str	r0, [r4, #4]
 800113a:	6863      	ldr	r3, [r4, #4]
 800113c:	6123      	str	r3, [r4, #16]
 800113e:	2300      	movs	r3, #0
 8001140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001144:	e7aa      	b.n	800109c <_printf_i+0x148>
 8001146:	6923      	ldr	r3, [r4, #16]
 8001148:	4632      	mov	r2, r6
 800114a:	4649      	mov	r1, r9
 800114c:	4640      	mov	r0, r8
 800114e:	47d0      	blx	sl
 8001150:	3001      	adds	r0, #1
 8001152:	d0ad      	beq.n	80010b0 <_printf_i+0x15c>
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	079b      	lsls	r3, r3, #30
 8001158:	d413      	bmi.n	8001182 <_printf_i+0x22e>
 800115a:	68e0      	ldr	r0, [r4, #12]
 800115c:	9b03      	ldr	r3, [sp, #12]
 800115e:	4298      	cmp	r0, r3
 8001160:	bfb8      	it	lt
 8001162:	4618      	movlt	r0, r3
 8001164:	e7a6      	b.n	80010b4 <_printf_i+0x160>
 8001166:	2301      	movs	r3, #1
 8001168:	4632      	mov	r2, r6
 800116a:	4649      	mov	r1, r9
 800116c:	4640      	mov	r0, r8
 800116e:	47d0      	blx	sl
 8001170:	3001      	adds	r0, #1
 8001172:	d09d      	beq.n	80010b0 <_printf_i+0x15c>
 8001174:	3501      	adds	r5, #1
 8001176:	68e3      	ldr	r3, [r4, #12]
 8001178:	9903      	ldr	r1, [sp, #12]
 800117a:	1a5b      	subs	r3, r3, r1
 800117c:	42ab      	cmp	r3, r5
 800117e:	dcf2      	bgt.n	8001166 <_printf_i+0x212>
 8001180:	e7eb      	b.n	800115a <_printf_i+0x206>
 8001182:	2500      	movs	r5, #0
 8001184:	f104 0619 	add.w	r6, r4, #25
 8001188:	e7f5      	b.n	8001176 <_printf_i+0x222>
 800118a:	bf00      	nop
 800118c:	080012b0 	.word	0x080012b0
 8001190:	080012c1 	.word	0x080012c1

08001194 <memmove>:
 8001194:	4288      	cmp	r0, r1
 8001196:	b510      	push	{r4, lr}
 8001198:	eb01 0402 	add.w	r4, r1, r2
 800119c:	d902      	bls.n	80011a4 <memmove+0x10>
 800119e:	4284      	cmp	r4, r0
 80011a0:	4623      	mov	r3, r4
 80011a2:	d807      	bhi.n	80011b4 <memmove+0x20>
 80011a4:	1e43      	subs	r3, r0, #1
 80011a6:	42a1      	cmp	r1, r4
 80011a8:	d008      	beq.n	80011bc <memmove+0x28>
 80011aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011b2:	e7f8      	b.n	80011a6 <memmove+0x12>
 80011b4:	4402      	add	r2, r0
 80011b6:	4601      	mov	r1, r0
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d100      	bne.n	80011be <memmove+0x2a>
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011c6:	e7f7      	b.n	80011b8 <memmove+0x24>

080011c8 <_sbrk_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4d06      	ldr	r5, [pc, #24]	@ (80011e4 <_sbrk_r+0x1c>)
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	4608      	mov	r0, r1
 80011d2:	602b      	str	r3, [r5, #0]
 80011d4:	f7ff fb1e 	bl	8000814 <_sbrk>
 80011d8:	1c43      	adds	r3, r0, #1
 80011da:	d102      	bne.n	80011e2 <_sbrk_r+0x1a>
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	b103      	cbz	r3, 80011e2 <_sbrk_r+0x1a>
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	bd38      	pop	{r3, r4, r5, pc}
 80011e4:	200001ac 	.word	0x200001ac

080011e8 <memcpy>:
 80011e8:	440a      	add	r2, r1
 80011ea:	4291      	cmp	r1, r2
 80011ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80011f0:	d100      	bne.n	80011f4 <memcpy+0xc>
 80011f2:	4770      	bx	lr
 80011f4:	b510      	push	{r4, lr}
 80011f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011fe:	4291      	cmp	r1, r2
 8001200:	d1f9      	bne.n	80011f6 <memcpy+0xe>
 8001202:	bd10      	pop	{r4, pc}

08001204 <_realloc_r>:
 8001204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001208:	4680      	mov	r8, r0
 800120a:	4615      	mov	r5, r2
 800120c:	460c      	mov	r4, r1
 800120e:	b921      	cbnz	r1, 800121a <_realloc_r+0x16>
 8001210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001214:	4611      	mov	r1, r2
 8001216:	f7ff bc4b 	b.w	8000ab0 <_malloc_r>
 800121a:	b92a      	cbnz	r2, 8001228 <_realloc_r+0x24>
 800121c:	f7ff fbdc 	bl	80009d8 <_free_r>
 8001220:	2400      	movs	r4, #0
 8001222:	4620      	mov	r0, r4
 8001224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001228:	f000 f81a 	bl	8001260 <_malloc_usable_size_r>
 800122c:	4285      	cmp	r5, r0
 800122e:	4606      	mov	r6, r0
 8001230:	d802      	bhi.n	8001238 <_realloc_r+0x34>
 8001232:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001236:	d8f4      	bhi.n	8001222 <_realloc_r+0x1e>
 8001238:	4629      	mov	r1, r5
 800123a:	4640      	mov	r0, r8
 800123c:	f7ff fc38 	bl	8000ab0 <_malloc_r>
 8001240:	4607      	mov	r7, r0
 8001242:	2800      	cmp	r0, #0
 8001244:	d0ec      	beq.n	8001220 <_realloc_r+0x1c>
 8001246:	42b5      	cmp	r5, r6
 8001248:	462a      	mov	r2, r5
 800124a:	4621      	mov	r1, r4
 800124c:	bf28      	it	cs
 800124e:	4632      	movcs	r2, r6
 8001250:	f7ff ffca 	bl	80011e8 <memcpy>
 8001254:	4621      	mov	r1, r4
 8001256:	4640      	mov	r0, r8
 8001258:	f7ff fbbe 	bl	80009d8 <_free_r>
 800125c:	463c      	mov	r4, r7
 800125e:	e7e0      	b.n	8001222 <_realloc_r+0x1e>

08001260 <_malloc_usable_size_r>:
 8001260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001264:	1f18      	subs	r0, r3, #4
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfbc      	itt	lt
 800126a:	580b      	ldrlt	r3, [r1, r0]
 800126c:	18c0      	addlt	r0, r0, r3
 800126e:	4770      	bx	lr

08001270 <_init>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	bf00      	nop
 8001274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001276:	bc08      	pop	{r3}
 8001278:	469e      	mov	lr, r3
 800127a:	4770      	bx	lr

0800127c <_fini>:
 800127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127e:	bf00      	nop
 8001280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001282:	bc08      	pop	{r3}
 8001284:	469e      	mov	lr, r3
 8001286:	4770      	bx	lr
